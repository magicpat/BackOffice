package dal;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;

public abstract class DatabaseAdapter {
    private String jdbcDriver = null;
    private String dbUser = null;
    private String dbPassword = null;
    private String dbUrl = null;
    protected Connection con = null;

    private boolean connected = false;
    private boolean transaction = false;

    protected DatabaseAdapter(String jdbcDriver, String dbUser, String dbPassword, String dbUrl){
        this.jdbcDriver = jdbcDriver;
        this.dbUser = dbUser;
        this.dbPassword = dbPassword;
        this.dbUrl = dbUrl;

        try {
            Class.forName(jdbcDriver);
        } catch (ClassNotFoundException ex) {
            System.err.println("Fehler beim Laden des JDBC-Treibers");
            return;
        }
    }

    public void connect() throws SQLException {
        if (con == null) {
            con = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            connected = true;
        }
    }

    public void beginTransaction() throws DALException{
        try{
            con.setAutoCommit(false);
            transaction = true;
        }catch(SQLException sqle){
            throw new DALException("Transaction could not be initialized...", sqle);
        }
    }
    
    public void commit() throws DALException{
        try{
            if(transaction)
                con.commit();
        }catch(SQLException sqle){
            throw new DALException("Error while trying to commit!", sqle);
        }finally{
            transaction = false;
        }
    }
    
    public void rollback() throws DALException{
        try{
            if(transaction)
                con.rollback();
        }catch(SQLException sqle){
            throw new DALException("Error while trying to rollback!", sqle);
        }finally{
            transaction = false;
        }
    }

    public void disconnect() throws DALException {
        if (con != null) {
            rollback();
            try{
                con.close();
            }catch(SQLException sqle){
                throw new DALException("Error while closing database-connection!", sqle);
            }
            con = null;
            connected = false;
        }
    }

    public boolean isConnected(){
        return connected;
    }

    public abstract <T extends DBEntity> T getEntityByID(Object id, Class<T> entityClass) throws DALException;


    /**
     *
     * @param entity - DBEntity-Object, which should be written
     * @return The new primary key (which was generated by the database) for this entity
     */
    public abstract Object addEntity(DBEntity entity) throws DALException;
    
    public abstract void updateEntity(DBEntity entity) throws DALException;
    
    public abstract void deleteEntity(Object id, Class<? extends DBEntity> entityClass) throws DALException;
    
    public abstract <T extends DBEntity> List<T> getEntityList(Class<T> entityClass) throws DALException;
}
